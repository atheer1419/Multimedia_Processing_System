package Multimedia_Processing_System;

import cpit380practice.Picture;
import cpit380practice.Pixel;
import java.awt.Color;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author macbook
 */
public class Pictures extends javax.swing.JFrame {

    static String image;
    ImageIcon icon;
    static Picture picture;
    static String r, g, b;

    /////////////
    private static int R_Value = -1;
    private static int G_Value = -1;
    private static int B_Value = -1;
    private static String imgName;
    private Picture sourcePicture;
    private static Picture pic;
    int numOfClicks = 0;
    int x1;
    int x2;
    int y1;
    int y2;

    /**
     * Creates new form Pictures
     */
    public Pictures() {
        initComponents();
        setVisible(false);
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        BrowesButton = new javax.swing.JButton();
        ClearButton1 = new javax.swing.JButton();
        InputImageLabel = new javax.swing.JLabel();
        OutputImageLabel = new javax.swing.JLabel();
        main_jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        AA = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        filters = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        color_Processing = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        info = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        collage = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        center_panel = new javax.swing.JPanel();
        AA_Menu = new javax.swing.JPanel();
        Rotation_Button1 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        rotateSlider = new javax.swing.JSlider();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        horizontal = new javax.swing.JButton();
        vertical = new javax.swing.JButton();
        Blending = new javax.swing.JButton();
        sliderBlending = new javax.swing.JSlider();
        jLabel36 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        GreenSlider = new javax.swing.JSlider();
        BlueSlider = new javax.swing.JSlider();
        RedSlider = new javax.swing.JSlider();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        filter_Menu = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        colorProcessing_Menu = new javax.swing.JPanel();
        Darkness = new javax.swing.JButton();
        Lightnes = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        Information_Menu = new javax.swing.JPanel();
        histogram = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        width = new javax.swing.JLabel();
        hight = new javax.swing.JLabel();
        Pixel_number = new javax.swing.JLabel();
        information_button = new javax.swing.JButton();
        collage_Menu = new javax.swing.JPanel();
        Collage = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(33, 34, 38));

        BrowesButton.setText("Browes");
        BrowesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowesButtonActionPerformed(evt);
            }
        });

        ClearButton1.setText("Clear");
        ClearButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearButton1ActionPerformed(evt);
            }
        });

        InputImageLabel.setBackground(new java.awt.Color(255, 255, 255));
        InputImageLabel.setForeground(new java.awt.Color(255, 255, 255));
        InputImageLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        OutputImageLabel.setBackground(new java.awt.Color(255, 255, 255));
        OutputImageLabel.setForeground(new java.awt.Color(255, 255, 255));
        OutputImageLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        main_jPanel2.setBackground(new java.awt.Color(242, 242, 242));

        jLabel2.setFont(new java.awt.Font("Gill Sans", 0, 18)); // NOI18N
        jLabel2.setText("Chose An ");

        jLabel3.setFont(new java.awt.Font("Gill Sans", 0, 18)); // NOI18N
        jLabel3.setText("Operation");

        AA.setBackground(new java.awt.Color(0, 0, 0));
        AA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AAMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                MouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                MouseEnteres(evt);
            }
        });

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Adjustment");

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Automatic   ");

        javax.swing.GroupLayout AALayout = new javax.swing.GroupLayout(AA);
        AA.setLayout(AALayout);
        AALayout.setHorizontalGroup(
            AALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AALayout.createSequentialGroup()
                .addGroup(AALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AALayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel5))
                    .addGroup(AALayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        AALayout.setVerticalGroup(
            AALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AALayout.createSequentialGroup()
                .addContainerGap(37, Short.MAX_VALUE)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(37, 37, 37))
        );

        filters.setBackground(new java.awt.Color(0, 0, 0));
        filters.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                filtersMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                MouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                MouseEnteres(evt);
            }
        });

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Filters");

        javax.swing.GroupLayout filtersLayout = new javax.swing.GroupLayout(filters);
        filters.setLayout(filtersLayout);
        filtersLayout.setHorizontalGroup(
            filtersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filtersLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel6)
                .addContainerGap(54, Short.MAX_VALUE))
        );
        filtersLayout.setVerticalGroup(
            filtersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filtersLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel6)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        color_Processing.setBackground(new java.awt.Color(0, 0, 0));
        color_Processing.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                color_ProcessingMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                MouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                MouseEnteres(evt);
            }
        });

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Color");

        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Processing");

        javax.swing.GroupLayout color_ProcessingLayout = new javax.swing.GroupLayout(color_Processing);
        color_Processing.setLayout(color_ProcessingLayout);
        color_ProcessingLayout.setHorizontalGroup(
            color_ProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(color_ProcessingLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(color_ProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addGroup(color_ProcessingLayout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jLabel7)))
                .addContainerGap(52, Short.MAX_VALUE))
        );
        color_ProcessingLayout.setVerticalGroup(
            color_ProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(color_ProcessingLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        info.setBackground(new java.awt.Color(0, 0, 0));
        info.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                infoMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                MouseEnteres(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                MouseExited(evt);
            }
        });

        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Information");

        javax.swing.GroupLayout infoLayout = new javax.swing.GroupLayout(info);
        info.setLayout(infoLayout);
        infoLayout.setHorizontalGroup(
            infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel9)
                .addContainerGap(64, Short.MAX_VALUE))
        );
        infoLayout.setVerticalGroup(
            infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, infoLayout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addGap(46, 46, 46))
        );

        collage.setBackground(new java.awt.Color(0, 0, 0));
        collage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                collageMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                MouseEnteres(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                MouseExited(evt);
            }
        });

        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Collage");

        javax.swing.GroupLayout collageLayout = new javax.swing.GroupLayout(collage);
        collage.setLayout(collageLayout);
        collageLayout.setHorizontalGroup(
            collageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(collageLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel10)
                .addContainerGap(46, Short.MAX_VALUE))
        );
        collageLayout.setVerticalGroup(
            collageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, collageLayout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addGap(46, 46, 46))
        );

        javax.swing.GroupLayout main_jPanel2Layout = new javax.swing.GroupLayout(main_jPanel2);
        main_jPanel2.setLayout(main_jPanel2Layout);
        main_jPanel2Layout.setHorizontalGroup(
            main_jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(main_jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(main_jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(main_jPanel2Layout.createSequentialGroup()
                .addGroup(main_jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(color_Processing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(info, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(collage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        main_jPanel2Layout.setVerticalGroup(
            main_jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(main_jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(AA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(color_Processing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(info, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(collage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        center_panel.setBackground(new java.awt.Color(33, 34, 38));
        center_panel.setLayout(new java.awt.CardLayout());

        AA_Menu.setBackground(new java.awt.Color(33, 34, 38));

        Rotation_Button1.setBackground(new java.awt.Color(58, 134, 255));
        Rotation_Button1.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        Rotation_Button1.setText("Rotation");
        Rotation_Button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Rotation_Button1ActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Gill Sans", 1, 24)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Automatic Adjustment ");

        rotateSlider.setBackground(new java.awt.Color(51, 102, 255));
        rotateSlider.setForeground(new java.awt.Color(255, 255, 255));
        rotateSlider.setMaximum(270);
        rotateSlider.setMinimum(-270);

        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("0");

        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("-90");

        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("-180");

        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("-270");

        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("90");

        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("180");

        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("270");

        horizontal.setBackground(new java.awt.Color(58, 134, 255));
        horizontal.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        horizontal.setText("Horizontal Reflection");
        horizontal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horizontalActionPerformed(evt);
            }
        });

        vertical.setBackground(new java.awt.Color(58, 134, 255));
        vertical.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        vertical.setText("Vertical Reflection");
        vertical.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verticalActionPerformed(evt);
            }
        });

        Blending.setBackground(new java.awt.Color(58, 134, 255));
        Blending.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        Blending.setText("Blending");
        Blending.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlendingActionPerformed(evt);
            }
        });

        sliderBlending.setBackground(new java.awt.Color(51, 102, 255));
        sliderBlending.setForeground(new java.awt.Color(255, 255, 255));
        sliderBlending.setMinimum(1);

        jLabel36.setForeground(new java.awt.Color(255, 255, 255));
        jLabel36.setText("100");

        jLabel38.setForeground(new java.awt.Color(255, 255, 255));
        jLabel38.setText("1");

        jLabel37.setForeground(new java.awt.Color(153, 153, 153));
        jLabel37.setText("____________ Color Change ____________");

        GreenSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                GreenSliderMouseReleased(evt);
            }
        });

        BlueSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                BlueSliderMouseReleased(evt);
            }
        });

        RedSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                RedSliderMouseReleased(evt);
            }
        });

        jLabel39.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel39.setForeground(java.awt.Color.red);
        jLabel39.setText("R");

        jLabel40.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel40.setForeground(java.awt.Color.green);
        jLabel40.setText("G");

        jLabel41.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel41.setForeground(java.awt.Color.blue);
        jLabel41.setText("B");

        jButton1.setBackground(new java.awt.Color(58, 134, 255));
        jButton1.setText("Diagonal Reflection D1 (Top to bottom)");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout AA_MenuLayout = new javax.swing.GroupLayout(AA_Menu);
        AA_Menu.setLayout(AA_MenuLayout);
        AA_MenuLayout.setHorizontalGroup(
            AA_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AA_MenuLayout.createSequentialGroup()
                .addGroup(AA_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AA_MenuLayout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addGroup(AA_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(AA_MenuLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(AA_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel37)
                                    .addComponent(jLabel38)))
                            .addGroup(AA_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(rotateSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, AA_MenuLayout.createSequentialGroup()
                                    .addComponent(jLabel15)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel14)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel13)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel12)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel16)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel17)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel18)))
                            .addGroup(AA_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel36)
                                .addComponent(sliderBlending, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(AA_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Rotation_Button1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Blending, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(vertical, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(horizontal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(AA_MenuLayout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(AA_MenuLayout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel39)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RedSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(jLabel40)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(GreenSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(jLabel41)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BlueSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 133, Short.MAX_VALUE))
        );
        AA_MenuLayout.setVerticalGroup(
            AA_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AA_MenuLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jLabel11)
                .addGap(44, 44, 44)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Rotation_Button1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rotateSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AA_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AA_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel12)
                        .addComponent(jLabel16)
                        .addComponent(jLabel17)
                        .addComponent(jLabel18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AA_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel13)
                        .addComponent(jLabel14)
                        .addComponent(jLabel15)))
                .addGap(27, 27, 27)
                .addComponent(horizontal, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(vertical, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(Blending, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sliderBlending, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AA_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(jLabel38))
                .addGap(31, 31, 31)
                .addComponent(jLabel37)
                .addGap(34, 34, 34)
                .addGroup(AA_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(GreenSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BlueSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RedSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel39)
                    .addComponent(jLabel40)
                    .addComponent(jLabel41))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        center_panel.add(AA_Menu, "card2");

        filter_Menu.setBackground(new java.awt.Color(33, 34, 38));

        jButton2.setBackground(new java.awt.Color(131, 56, 236));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton2.setText("Laplacian filters");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(131, 56, 236));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton3.setText("Edge detection");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(131, 56, 236));
        jButton4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton4.setText("Sobel filter");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(131, 56, 236));
        jButton5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton5.setText("Median filter");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(131, 56, 236));
        jButton6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton6.setText("Red Eye ");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(131, 56, 236));
        jButton7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton7.setText("Chromacky");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Filters");

        javax.swing.GroupLayout filter_MenuLayout = new javax.swing.GroupLayout(filter_Menu);
        filter_Menu.setLayout(filter_MenuLayout);
        filter_MenuLayout.setHorizontalGroup(
            filter_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filter_MenuLayout.createSequentialGroup()
                .addGroup(filter_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(filter_MenuLayout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addGroup(filter_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(filter_MenuLayout.createSequentialGroup()
                        .addGap(258, 258, 258)
                        .addComponent(jLabel1)))
                .addContainerGap(201, Short.MAX_VALUE))
        );
        filter_MenuLayout.setVerticalGroup(
            filter_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filter_MenuLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 116, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(129, 129, 129))
        );

        center_panel.add(filter_Menu, "card2");

        colorProcessing_Menu.setBackground(new java.awt.Color(33, 34, 38));

        Darkness.setBackground(new java.awt.Color(255, 0, 110));
        Darkness.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Darkness.setText("Darkness");
        Darkness.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DarknessActionPerformed(evt);
            }
        });

        Lightnes.setBackground(new java.awt.Color(255, 0, 110));
        Lightnes.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Lightnes.setText("Lightnes");
        Lightnes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LightnesActionPerformed(evt);
            }
        });

        jButton10.setBackground(new java.awt.Color(255, 0, 110));
        jButton10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton10.setText("Convert gray to binary");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setBackground(new java.awt.Color(255, 0, 110));
        jButton11.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton11.setText("Convert to gray scale image");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("Color processing ");

        javax.swing.GroupLayout colorProcessing_MenuLayout = new javax.swing.GroupLayout(colorProcessing_Menu);
        colorProcessing_Menu.setLayout(colorProcessing_MenuLayout);
        colorProcessing_MenuLayout.setHorizontalGroup(
            colorProcessing_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colorProcessing_MenuLayout.createSequentialGroup()
                .addGroup(colorProcessing_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(colorProcessing_MenuLayout.createSequentialGroup()
                        .addGap(161, 161, 161)
                        .addGroup(colorProcessing_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Lightnes, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Darkness, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(colorProcessing_MenuLayout.createSequentialGroup()
                        .addGap(201, 201, 201)
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(191, Short.MAX_VALUE))
        );
        colorProcessing_MenuLayout.setVerticalGroup(
            colorProcessing_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, colorProcessing_MenuLayout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 127, Short.MAX_VALUE)
                .addComponent(Lightnes, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(Darkness, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(171, 171, 171))
        );

        center_panel.add(colorProcessing_Menu, "card2");

        Information_Menu.setBackground(new java.awt.Color(33, 34, 38));

        histogram.setBackground(new java.awt.Color(251, 86, 7));
        histogram.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        histogram.setText("Histogram");
        histogram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                histogramActionPerformed(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("Information");

        jLabel22.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(251, 86, 7));
        jLabel22.setText("The width:");

        jLabel23.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(251, 86, 7));
        jLabel23.setText("The Hight:");

        jLabel24.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(251, 86, 7));
        jLabel24.setText("The Pixels Number:");

        width.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        width.setForeground(new java.awt.Color(255, 255, 255));

        hight.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        hight.setForeground(new java.awt.Color(255, 255, 255));

        Pixel_number.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Pixel_number.setForeground(new java.awt.Color(255, 255, 255));

        information_button.setBackground(new java.awt.Color(251, 86, 7));
        information_button.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        information_button.setText("Display information");
        information_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                information_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Information_MenuLayout = new javax.swing.GroupLayout(Information_Menu);
        Information_Menu.setLayout(Information_MenuLayout);
        Information_MenuLayout.setHorizontalGroup(
            Information_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Information_MenuLayout.createSequentialGroup()
                .addGap(276, 276, 276)
                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(Information_MenuLayout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(width, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(Information_MenuLayout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addGroup(Information_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Information_MenuLayout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(hight, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(Information_MenuLayout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(jLabel24)
                .addGap(13, 13, 13)
                .addComponent(Pixel_number, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(Information_MenuLayout.createSequentialGroup()
                .addGap(180, 180, 180)
                .addGroup(Information_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(information_button, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(histogram, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        Information_MenuLayout.setVerticalGroup(
            Information_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Information_MenuLayout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(jLabel21)
                .addGap(128, 128, 128)
                .addGroup(Information_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel22)
                    .addComponent(width, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(Information_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Information_MenuLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(hight, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel23))
                .addGap(30, 30, 30)
                .addGroup(Information_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel24)
                    .addComponent(Pixel_number, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addComponent(information_button, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60)
                .addComponent(histogram, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        center_panel.add(Information_Menu, "card2");

        collage_Menu.setBackground(new java.awt.Color(33, 34, 38));

        Collage.setBackground(new java.awt.Color(255, 190, 11));
        Collage.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Collage.setText("Collage");
        Collage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CollageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout collage_MenuLayout = new javax.swing.GroupLayout(collage_Menu);
        collage_Menu.setLayout(collage_MenuLayout);
        collage_MenuLayout.setHorizontalGroup(
            collage_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(collage_MenuLayout.createSequentialGroup()
                .addGap(219, 219, 219)
                .addComponent(Collage, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(253, Short.MAX_VALUE))
        );
        collage_MenuLayout.setVerticalGroup(
            collage_MenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(collage_MenuLayout.createSequentialGroup()
                .addGap(328, 328, 328)
                .addComponent(Collage, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(336, Short.MAX_VALUE))
        );

        center_panel.add(collage_Menu, "card2");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(InputImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(OutputImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BrowesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ClearButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addComponent(center_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(main_jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(InputImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(BrowesButton)
                .addGap(9, 9, 9)
                .addComponent(ClearButton1))
            .addComponent(center_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(main_jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(OutputImageLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MouseEnteres(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MouseEnteres
        //AA the button
        if (evt.getSource() == AA) {
            AA.setBackground(new Color(58, 134, 255));
        }

        //filters the button
        if (evt.getSource() == filters) {
            filters.setBackground(new Color(131, 56, 236));
        }
        //color pricessing the button
        if (evt.getSource() == color_Processing) {
            color_Processing.setBackground(new Color(255, 0, 110));
        }
        //info the button
        if (evt.getSource() == info) {
            info.setBackground(new Color(251, 86, 7));
        }
        //collage the button
        if (evt.getSource() == collage) {
            collage.setBackground(new Color(255, 190, 11));
        }

    }//GEN-LAST:event_MouseEnteres

    private void MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MouseExited

        //AA the button
        if (evt.getSource() == AA) {
            AA.setBackground(new Color(13, 0, 0));
        }

        //filters the button
        if (evt.getSource() == filters) {
            filters.setBackground(new Color(13, 0, 0));
        }
        //color pricessing the button
        if (evt.getSource() == color_Processing) {
            color_Processing.setBackground(new Color(13, 0, 0));
        }
        //info the button
        if (evt.getSource() == info) {
            info.setBackground(new Color(13, 0, 0));
        }
        //collage the button
        if (evt.getSource() == collage) {
            collage.setBackground(new Color(13, 0, 0));
        }
    }//GEN-LAST:event_MouseExited

    private void AAMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AAMouseClicked
        // TODO add your handling code here:
        //AA the button

        AA_Menu.setVisible(true);
        filter_Menu.setVisible(false);
        colorProcessing_Menu.setVisible(false);
        Information_Menu.setVisible(false);
        collage_Menu.setVisible(false);


    }//GEN-LAST:event_AAMouseClicked

    private void filtersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filtersMouseClicked
        // TODO add your handling code here:

        AA_Menu.setVisible(false);
        filter_Menu.setVisible(true);
        colorProcessing_Menu.setVisible(false);
        Information_Menu.setVisible(false);
        collage_Menu.setVisible(false);

    }//GEN-LAST:event_filtersMouseClicked

    private void color_ProcessingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_color_ProcessingMouseClicked

        AA_Menu.setVisible(false);
        filter_Menu.setVisible(false);
        colorProcessing_Menu.setVisible(true);
        Information_Menu.setVisible(false);
        collage_Menu.setVisible(false);

    }//GEN-LAST:event_color_ProcessingMouseClicked

    private void Rotation_Button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Rotation_Button1ActionPerformed
        if (pic != null) {

            System.out.println("rotateSlider" + rotateSlider.getValue());
            if (rotateSlider.getValue() > 0 && rotateSlider.getValue() <= 90) {
                pic = pic.rotateRight();
            } else if (rotateSlider.getValue() > 90 && rotateSlider.getValue() <= 180) {
                pic.rotate180();
            } else if (rotateSlider.getValue() > 180 && rotateSlider.getValue() <= 270) {
                pic = pic.rotateLeft();
            } else if (rotateSlider.getValue() < 0 && rotateSlider.getValue() >= -90) {
                pic = pic.rotateLeft();
            } else if (rotateSlider.getValue() < -90 && rotateSlider.getValue() >= -180) {
                pic.rotate180();
            } else if (rotateSlider.getValue() < -180 && rotateSlider.getValue() >= -270) {
                pic = pic.rotateRight();
            }
            updateIMG();
        } else {
            JOptionPane.showMessageDialog(null, "Select an image please!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_Rotation_Button1ActionPerformed

    private void horizontalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horizontalActionPerformed
        // TODO add your handling code here:
        if (pic == null) {
            JOptionPane.showMessageDialog(null, "Select an image ", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            for (int x = 0; x < pic.getHeight(); x++) {
                int target_x = pic.getWidth() - 1;
                int source_x = 0;
                while (target_x > source_x) {
                    Pixel source_Pixel = pic.getPixel(source_x, x);
                    Pixel target_Pixel = pic.getPixel(target_x, x);
                    target_Pixel.setColor(source_Pixel.getColor());
                    target_x--;
                    source_x++;
                }
            }
            updateIMG();
        }
    }//GEN-LAST:event_horizontalActionPerformed

    private void verticalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verticalActionPerformed
        // TODO add your handling code here:

        if (pic == null) {
            JOptionPane.showMessageDialog(null, "Select an image", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            int source_y = 0;
            int target_y = pic.getHeight() - 1;
            while (target_y > source_y) {
                for (int x = 0; x < pic.getWidth(); x++) {
                    Pixel source_Pixel = pic.getPixel(x, source_y);
                    Pixel target_Pixel = pic.getPixel(x, target_y);
                    target_Pixel.setColor(source_Pixel.getColor());
                }
                target_y--;
                source_y++;
            }
            updateIMG();
        }
    }//GEN-LAST:event_verticalActionPerformed

    private void BlendingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlendingActionPerformed
        String pathPic1 = "C:\\Users\\WinDows\\Desktop\\patern.jpg";
        Picture target = new Picture(pathPic1);

        JFileChooser jFileChooser = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        jFileChooser.showOpenDialog(jFileChooser);
        Picture pic2 = new Picture(jFileChooser.getSelectedFile().getAbsolutePath());

        Pixel pixPic1 = null;
        Pixel pixPic2 = null;
        Pixel pTarget = null;
        int sourceX = 0; // width
        int targetX = 0;// width

        // For1
        System.out.println("sliderBlending.getValue() " + sliderBlending.getValue());
        for (; sourceX < sliderBlending.getValue(); sourceX++, targetX++) {
            for (int sourceY = 0, targetY = 0; sourceY < pic.getHeight(); sourceY++, targetY++) {
                pixPic1 = pic.getPixel(sourceX, sourceY);
                pTarget = target.getPixel(targetX, targetY);
                pTarget.setColor(pixPic1.getColor());
            }
        }
        //For2
        for (; sourceX < pic.getWidth(); sourceX++, targetX++) {
            for (int sourceY = 0, targetY = 0; sourceY < pic.getHeight(); sourceY++, targetY++) {
                pixPic1 = pic.getPixel(sourceX, sourceY);
                pixPic2 = pic2.getPixel(sourceX - sliderBlending.getValue(), sourceY);
                pTarget = target.getPixel(targetX, targetY);
                pTarget.setColor(
                        new Color((int) (pixPic1.getRed() * 0.5 + pixPic2.getRed() * 0.5),
                                (int) (pixPic1.getGreen() * 0.5 + pixPic2.getGreen() * 0.5),
                                (int) (pixPic1.getBlue() * 0.5 + pixPic2.getBlue() * 0.5)));
            }
        }

        // For3
        sourceX = sourceX - sliderBlending.getValue();
        for (; sourceX < pic2.getWidth(); sourceX++, targetX++) {
            for (int sourceY = 0, targetY = 0; sourceY < pic2.getHeight(); sourceY++, targetY++) {
                pixPic2 = pic2.getPixel(sourceX, sourceY);
                pTarget = target.getPixel(targetX, targetY);
                pTarget.setColor(pixPic2.getColor());
            }
        }

        pic = target;
        updateIMG();
    }//GEN-LAST:event_BlendingActionPerformed


    private void BrowesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowesButtonActionPerformed
        // TODO add your handling code here:

        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        jfc.setDialogTitle("Select an image");
        jfc.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("PNG or JPG", "png", "jpg", "jpeg");
        jfc.addChoosableFileFilter(filter);

        int returnValue = jfc.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            System.out.println(jfc.getSelectedFile().getPath() + " is selected");
            imgName = jfc.getSelectedFile().getPath();
            RedSlider.setEnabled(true);
            GreenSlider.setEnabled(true);
            BlueSlider.setEnabled(true);
            RedSlider.setValue(50);
            GreenSlider.setValue(50);
            BlueSlider.setValue(50);
            R_Value = -1;
            G_Value = -1;
            B_Value = -1;
            pic = new Picture(imgName);
            sourcePicture = new Picture(imgName);
            Image img = (pic.getImage()).getScaledInstance(InputImageLabel.getWidth(), InputImageLabel.getHeight(), Image.SCALE_SMOOTH);;
            InputImageLabel.setText("");
            InputImageLabel.setIcon(new ImageIcon(img));
            updateIMG();
        }
    }//GEN-LAST:event_BrowesButtonActionPerformed

    private void ClearButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearButton1ActionPerformed
        pic = new Picture(imgName);
        sourcePicture = new Picture(imgName);
        RedSlider.setValue(50);
        GreenSlider.setValue(50);
        BlueSlider.setValue(50);
        R_Value = -1;
        G_Value = -1;
        B_Value = -1;
        updateIMG();
    }//GEN-LAST:event_ClearButton1ActionPerformed

    private void RedSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RedSliderMouseReleased
        if (pic != null) {
            G_Value = RedSlider.getValue();
            updateColors();
        }
    }//GEN-LAST:event_RedSliderMouseReleased

    private void GreenSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GreenSliderMouseReleased
        // TODO add your handling code here:
        if (pic != null) {
            G_Value = GreenSlider.getValue();
            updateColors();
        }
    }//GEN-LAST:event_GreenSliderMouseReleased

    private void BlueSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BlueSliderMouseReleased
        // TODO add your handling code here:
        if (pic != null) {
            B_Value = BlueSlider.getValue();
            updateColors();
        }
    }//GEN-LAST:event_BlueSliderMouseReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        pic.ReflectD1_T2B();
        updateIMG();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        if (pic == null) {
            JOptionPane.showMessageDialog(null, "Select an image please!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            JFrame parent = new JFrame();
            JOptionPane.showMessageDialog(parent, "Please click on two points in the image");

            InputImageLabel.addMouseListener(new MouseAdapter() {
                public void mouseClicked(MouseEvent e) {
                    numOfClicks++;
                    if (numOfClicks == 1) {
                        x1 = e.getX();
                        y1 = e.getY();
                    } else if (numOfClicks == 2) {
                        x2 = e.getX();
                        y2 = e.getY();
                        double W = (pic.getWidth() * 1.00 / InputImageLabel.getWidth());
                        double H = (pic.getHeight() * 1.00 / InputImageLabel.getHeight());

                        x1 = (int) (W * x1);
                        x2 = (int) (W * x2);
                        y1 = (int) (H * y1);
                        y2 = (int) (H * y2);

//                        Color newColor = JColorChooser.showDialog(null, "Choose New Color", Color.BLACK);
                        int trashhold = Integer.parseInt(JOptionPane.showInputDialog("TrashHold?"));
                        for (int i = y1; i < y2; i++) {
                            for (int j = x1; j < x2; j++) {
                                Pixel p = pic.getPixel(j, i);
                                //here we compare because get the different between Red color amd pxl .
                                if (p.colorDistance(Color.RED) < trashhold) {
                                    p.setColor(Color.BLACK);
                                }
                            }
                        }
                        updateIMG();
                        numOfClicks = 0;
                        InputImageLabel.removeMouseListener(this);
                    }
                }
            });
        }

    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        if (pic == null) {
            JOptionPane.showMessageDialog(null, "Select an image please!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            String size = JOptionPane.showInputDialog(null, "Please Enter the threshold value: ");
            try {
                int th = Integer.parseInt(size);
                pic.edgeDetection_LR(th);
                updateIMG();
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Please put integer only", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        if (pic != null) {
            JFileChooser FileChooser = new JFileChooser("C:\\Users\\alish\\Desktop\\SoMultimedia");
            int conf = JOptionPane.showConfirmDialog(null, "Choose new background image", "Choose New Background", JOptionPane.OK_CANCEL_OPTION);
            if (conf == 0) {
                int val = FileChooser.showOpenDialog(null);
                if (val == JFileChooser.APPROVE_OPTION) {
                    Picture newBackground = new Picture(FileChooser.getSelectedFile().getAbsolutePath());
                    if (newBackground.getHeight() >= pic.getHeight() && newBackground.getWidth() >= pic.getWidth()) {
                        Chromacky(newBackground);
                    } else {
                        JOptionPane.showMessageDialog(null, "New Background Size must be >= Picture Size", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Select an image please!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        if (pic == null) {
            JOptionPane.showMessageDialog(null, "Select an image ", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                pic.medianfilter();
                updateIMG();
            } catch (NumberFormatException e) {
                System.out.println(e);
                JOptionPane.showMessageDialog(null, "Please put integer only", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if (pic == null) {
            JOptionPane.showMessageDialog(null, "Select an image ", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                pic.grayscale();
                Picture pic2 = new Picture(pic.getWidth(), pic.getHeight());
                Pixel pp;
                int sum = 0;
                for (int i = 1; i < pic.getWidth() - 1; i++) {
                    for (int j = 1; j < pic.getHeight() - 1; j++) {
                        pp = pic.getPixel(j, i);
                        int a[] = new int[]{pic.getPixel(i - 1, j - 1).getRed() * 1,
                            pic.getPixel(i - 1, j).getRed() * 1,
                            pic.getPixel(i - 1, j + 1).getRed() * 1,
                            pic.getPixel(i, j - 1).getRed() * 1,
                            pic.getPixel(i, j).getRed() * -8,
                            pic.getPixel(i, j + 1).getRed() * 1,
                            pic.getPixel(i + 1, j - 1).getRed() * 1,
                            pic.getPixel(i + 1, j).getRed() * 1,
                            pic.getPixel(i + 1, j + 1).getRed() * 1};
                        sum = a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8];

                        if (sum > 255) {
                            sum = 255;
                        } else if (sum < 0) {
                            sum = 0;
                        }

                        pic2.getPixel(i, j).setColor(new Color(sum, sum, sum));
                    }

                }
                pic = pic2;
                updateIMG();
            } catch (NumberFormatException e) {
                System.out.println(e);
                JOptionPane.showMessageDialog(null, "Please put integer only", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        if (pic == null) {
            JOptionPane.showMessageDialog(null, "Select an image ", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                pic.sopelFilter();
                updateIMG();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Please put integer only", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void DarknessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DarknessActionPerformed
        // TODO add your handling code here:
        if (pic == null) {
            JOptionPane.showMessageDialog(null, "Select an image please!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                JFrame parent = new JFrame();
                JOptionPane.showMessageDialog(parent, "Please click on two points in the image");

                InputImageLabel.addMouseListener(new MouseAdapter() {
                    public void mouseClicked(MouseEvent e) {
                        numOfClicks++;
                        if (numOfClicks == 1) {
                            x1 = e.getX();
                            y1 = e.getY();
                        } else if (numOfClicks == 2) {
                            x2 = e.getX();
                            y2 = e.getY();

                            double W = (pic.getWidth() * 1.00 / InputImageLabel.getWidth());
                            double H = (pic.getHeight() * 1.00 / InputImageLabel.getHeight());

                            x1 = (int) (W * x1);
                            x2 = (int) (W * x2);
                            y1 = (int) (H * y1);
                            y2 = (int) (H * y2);
                            Pixel pxl = null;
                            Color color = null;
                            for (int i = y1; i < y2; i++) {
                                for (int j = x1; j < x2; j++) {
                                    pxl = pic.getPixel(j, i);
                                    // get the current color
                                    color = pxl.getColor();
                                    // get a darker color
                                    color = color.darker();
                                    // set the pixel color to the lighter color
                                    pxl.setColor(color);
                                }
                            }
                            updateIMG();
                            numOfClicks = 0;
                            InputImageLabel.removeMouseListener(this);
                        }
                    }
                });

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Please put integer only", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_DarknessActionPerformed

    private void LightnesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LightnesActionPerformed
        // TODO add your handling code here:
        if (pic == null) {
            JOptionPane.showMessageDialog(null, "Select an image please!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                JFrame parent = new JFrame();
                JOptionPane.showMessageDialog(parent, "Please click on two points in the image");

                InputImageLabel.addMouseListener(new MouseAdapter() {
                    public void mouseClicked(MouseEvent e) {
                        numOfClicks++;
                        if (numOfClicks == 1) {
                            x1 = e.getX();
                            y1 = e.getY();
                        } else if (numOfClicks == 2) {
                            x2 = e.getX();
                            y2 = e.getY();

                            double W = (pic.getWidth() * 1.00 / InputImageLabel.getWidth());
                            double H = (pic.getHeight() * 1.00 / InputImageLabel.getHeight());

                            x1 = (int) (W * x1);
                            x2 = (int) (W * x2);
                            y1 = (int) (H * y1);
                            y2 = (int) (H * y2);
                            Pixel pxl = null;
                            Color color = null;
                            for (int i = y1; i < y2; i++) {
                                for (int j = x1; j < x2; j++) {
                                    pxl = pic.getPixel(j, i);
                                    // get the current color
                                    color = pxl.getColor();
                                    // get a lighter color
                                    color = color.brighter();
                                    // set the pixel color to the lighter color
                                    pxl.setColor(color);
                                }
                            }
                            updateIMG();
                            numOfClicks = 0;
                            InputImageLabel.removeMouseListener(this);
                        }
                    }
                });

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Please put integer only", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_LightnesActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        if (pic == null) {
            JOptionPane.showMessageDialog(null, "Select an image ", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            String ThresholdValue = JOptionPane.showInputDialog(null, "Please Enter the threadshold number: ");
            try {

                JFrame parent = new JFrame();
                JOptionPane.showMessageDialog(parent, "Please click on two points in the image");

                InputImageLabel.addMouseListener(new MouseAdapter() {
                    public void mouseClicked(MouseEvent e) {
                        numOfClicks++;
                        if (numOfClicks == 1) {
                            x1 = e.getX();
                            y1 = e.getY();
                        } else if (numOfClicks == 2) {
                            x2 = e.getX();
                            y2 = e.getY();

                            double W = (pic.getWidth() * 1.00 / InputImageLabel.getWidth());
                            double H = (pic.getHeight() * 1.00 / InputImageLabel.getHeight());

                            x1 = (int) (W * x1);
                            x2 = (int) (W * x2);
                            y1 = (int) (H * y1);
                            y2 = (int) (H * y2);

                            int avar;
                            for (int i = y1; i < y2; i++) {
                                for (int j = x1; j < x2; j++) {
                                    int threshold = Integer.parseInt(ThresholdValue);
                                    avar = (int) Math.abs(pic.getPixel(j, i).getAverage());
                                    if (avar < threshold) {
                                        pic.getPixel(j, i).setColor(Color.BLACK);
                                    } else {
                                        pic.getPixel(j, i).setColor(Color.WHITE);
                                    }
                                }
                            }

                            updateIMG();
                            numOfClicks = 0;
                            InputImageLabel.removeMouseListener(this);
                        }
                    }
                });

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Please put integer only", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        if (pic == null) {
            JOptionPane.showMessageDialog(null, "Select an image please!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                JFrame parent = new JFrame();
                JOptionPane.showMessageDialog(parent, "Please click on two points in the image");

                InputImageLabel.addMouseListener(new MouseAdapter() {
                    public void mouseClicked(MouseEvent e) {
                        numOfClicks++;
                        if (numOfClicks == 1) {
                            x1 = e.getX();
                            y1 = e.getY();
                        } else if (numOfClicks == 2) {
                            x2 = e.getX();
                            y2 = e.getY();

                            double W = (pic.getWidth() * 1.00 / InputImageLabel.getWidth());
                            double H = (pic.getHeight() * 1.00 / InputImageLabel.getHeight());

                            x1 = (int) (W * x1);
                            x2 = (int) (W * x2);
                            y1 = (int) (H * y1);
                            y2 = (int) (H * y2);
                            Pixel pxl = null;
//                            int avar;
                            for (int i = y1; i < y2; i++) {
                                for (int j = x1; j < x2; j++) {

                                    pxl = pic.getPixel(j, i);
                                    int avg = (pxl.getRed() + pxl.getBlue() + pxl.getGreen()) / 3;
                                    //---- after that change the color to new color with value of avg in all pxl color
                                    pxl.setColor(new Color(avg, avg, avg));
                                }
                            }

                            updateIMG();
                            numOfClicks = 0;
                            InputImageLabel.removeMouseListener(this);
                        }
                    }
                });

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Please put integer only", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void histogramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_histogramActionPerformed
        // TODO add your handling code here:
        ComputeHistograms();

    }//GEN-LAST:event_histogramActionPerformed

    private void infoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_infoMouseClicked
        // TODO add your handling code here:
        AA_Menu.setVisible(false);
        filter_Menu.setVisible(false);
        colorProcessing_Menu.setVisible(false);
        Information_Menu.setVisible(true);
        collage_Menu.setVisible(false);
    }//GEN-LAST:event_infoMouseClicked

    private void CollageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CollageActionPerformed
        // TODO add your handling code here:
        if (pic == null) {
            JOptionPane.showMessageDialog(null, "Select an image please!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            String pathPic1 = "C:\\Users\\WinDows\\Desktop\\patern.jpg";
            Picture target = new Picture(pathPic1);

            JFrame parent = new JFrame();
            JOptionPane.showMessageDialog(parent, "Please click on two points in the image");

            InputImageLabel.addMouseListener(new MouseAdapter() {
                public void mouseClicked(MouseEvent e) {
                    numOfClicks++;
                    if (numOfClicks == 1) {
                        x1 = e.getX();
                        y1 = e.getY();
                    } else if (numOfClicks == 2) {
                        x2 = e.getX();
                        y2 = e.getY();

                        double W = (pic.getWidth() * 1.00 / InputImageLabel.getWidth());
                        double H = (pic.getHeight() * 1.00 / InputImageLabel.getHeight());

                        x1 = (int) (W * x1);
                        x2 = (int) (W * x2);
                        y1 = (int) (H * y1);
                        y2 = (int) (H * y2);

                        int counter = 1;
                        int counter2 = 0;
                        int x = 0;
                        for (int i = 0; i < target.getWidth(); i++) {
                            for (int j = 0; j < target.getHeight(); j++) {
                                target.copy(pic, x1, y1, x2, y2, x, counter2 * (y1 + y2));
                                counter2++;
                            }
                            x = counter * (x1 + x2);
                            counter2 = 0;
                            counter++;
                        }

                        pic = target;
                        updateIMG();
                        numOfClicks = 0;
                        InputImageLabel.removeMouseListener(this);
                    }
                }
            }
            );
        }
    }//GEN-LAST:event_CollageActionPerformed

    private void collageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_collageMouseClicked
        // TODO add your handling code here:
        AA_Menu.setVisible(false);
        filter_Menu.setVisible(false);
        colorProcessing_Menu.setVisible(false);
        Information_Menu.setVisible(false);
        collage_Menu.setVisible(true);
    }//GEN-LAST:event_collageMouseClicked

    private void information_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_information_buttonActionPerformed
        // TODO add your handling code here:
        Pixel pix[] = pic.getPixels();
        width.setText(pic.getWidth() + "");
        hight.setText(pic.getHeight() + "");
        Pixel_number.setText("" + pix.length);

    }//GEN-LAST:event_information_buttonActionPerformed
    private void Chromacky(Picture newBackground) {
        Pixel picPixel = null;
        Pixel newPixel = null;
        for (int i = 0; i < pic.getWidth(); i++) {
            for (int j = 0; j < pic.getHeight(); j++) {
                picPixel = pic.getPixel(i, j);
                newPixel = newBackground.getPixel(i, j);
                if (picPixel.colorDistance(Color.GREEN) < 160) {
                    picPixel.setColor(newPixel.getColor());
                }
            }
        }
        updateIMG();
    }

    private void updateIMG() {
        Image img = (pic.getImage()).getScaledInstance(OutputImageLabel.getWidth(), OutputImageLabel.getHeight(), Image.SCALE_SMOOTH);;
        OutputImageLabel.setText("");
        OutputImageLabel.setIcon(new ImageIcon(img));
        //System.out.printf("R= %d,G= %d,B= %d \n", R_Value, G_Value, B_Value);
    }

    private void updateColors() {
        JFrame parent = new JFrame();
        JOptionPane.showMessageDialog(parent, "Please click on two points in the image");

        InputImageLabel.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                numOfClicks++;
                if (numOfClicks == 1) {
                    x1 = e.getX();
                    y1 = e.getY();
                } else if (numOfClicks == 2) {
                    x2 = e.getX();
                    y2 = e.getY();

                    double W = (pic.getWidth() * 1.00 / InputImageLabel.getWidth());
                    double H = (pic.getHeight() * 1.00 / InputImageLabel.getHeight());

                    x1 = (int) (W * x1);
                    x2 = (int) (W * x2);
                    y1 = (int) (H * y1);
                    y2 = (int) (H * y2);

                    Pixel pixelObj = null;
                    for (int i = y1; i < y2; i++) {
                        for (int j = x1; j < x2; j++) {
                            pixelObj = pic.getPixel(j, i);

//                            //here we compare because get the different between Red color amd pxl .
                            if (R_Value != -1) {
                                pixelObj.setRed((int) (pixelObj.getRed() * (R_Value / 50.0)));
                            }
                            if (G_Value != -1) {
                                pixelObj.setGreen((int) (pixelObj.getGreen() * (G_Value / 50.0)));
                            }
                            if (B_Value != -1) {
                                pixelObj.setBlue((int) (pixelObj.getBlue() * (B_Value / 50.0)));
                            }
                        }
                    }

                    RedSlider.setValue(50);
                    GreenSlider.setValue(50);
                    BlueSlider.setValue(50);
                    updateIMG();
                    numOfClicks = 0;
                    InputImageLabel.removeMouseListener(this);
                }
            }
        });

    }

    private Pixel_LL[][] ComputeHistograms() {

        Pixel_LL[][] Histograms = new Pixel_LL[3][256]; // [0] red, [1] green [2] blue
        int maxR = 0;
        int maxR_index = 0;
        int maxG = 0;
        int maxG_index = 0;
        int maxB = 0;
        int maxB_index = 0;

        for (int i = 0; i < 256; i++) { // Inisilazing all the arrays
            Histograms[0][i] = new Pixel_LL();
            Histograms[1][i] = new Pixel_LL();
            Histograms[2][i] = new Pixel_LL();
        }
        for (int i = 0; i < pic.getWidth(); i++) {
            for (int j = 0; j < pic.getHeight(); j++) {
                int intensityR = pic.getPixel(i, j).getRed();
                int intensityG = pic.getPixel(i, j).getGreen();
                int intensityB = pic.getPixel(i, j).getBlue();
                Histograms[0][intensityR].addPixel(new PixelLinkedList_node(i, j));
                Histograms[1][intensityG].addPixel(new PixelLinkedList_node(i, j));
                Histograms[2][intensityB].addPixel(new PixelLinkedList_node(i, j));

//                Red 
                if (Histograms[0][intensityR].getTotal() > maxR) {
                    maxR = Histograms[0][intensityR].getTotal();
                    maxR_index = intensityR;
                }
                if (Histograms[1][intensityG].getTotal() > maxG) {
                    maxG = Histograms[1][intensityG].getTotal();
                    maxG_index = intensityG;
                }
                if (Histograms[2][intensityB].getTotal() > maxB) {
                    maxB = Histograms[2][intensityB].getTotal();
                    maxB_index = intensityB;
                }
            }
        }
        // ***plotting the histogrmas***
        if ((maxR == maxG && maxR == maxB)) {// image is gray
            if ((maxR_index == maxG_index && maxG_index == maxB_index)) {
                PlotHistogram("Gray", Histograms[0]);
                return Histograms;
            }
        }
        PlotHistogram("RED", Histograms[0]);
        PlotHistogram("GREEN", Histograms[1]);
        PlotHistogram("BLUE", Histograms[2]);
        return Histograms;
    }

    private void PlotHistogram(String color, Pixel_LL Histogram[]) {
        // first must find the max height of the histogram.
        int maxHeight = 0;
        for (int i = 0; i < Histogram.length; i++) {
            if (Histogram[i].getTotal() > maxHeight) {
                maxHeight = Histogram[i].getTotal();
            }
        }

        Picture histogram = new Picture(256, 256, Color.white);

        Color c;
        if (color.equalsIgnoreCase("RED")) {
            c = Color.RED;
        } else if (color.equalsIgnoreCase("green")) {
            c = Color.GREEN;
        } else if (color.equalsIgnoreCase("BLue")) {
            c = Color.BLUE;
        } else {
            c = Color.GRAY;
        }

        // Actual max = maxHeight
        // the max we want to make is 512 so it become visible
        for (int i = 0; i < 256; i++) { // now plot the histogram
            int max = (int) (Histogram[i].getTotal() * 256 / maxHeight);
            for (int j = 255; j >= (256 - max); j--) {
                histogram.getPixel(i, j).setColor(c);
            }
        }
//        scaleUp()method -> scale the window size
        histogram.scaleUp(2).show();

    }

    private void reConstructeTheImage(File histogramFile) throws FileNotFoundException {
        Scanner input = new Scanner(histogramFile);
        Picture replot = new Picture(input.nextInt(), input.nextInt());

        Pixel_LL[] HistogramsRed = new Pixel_LL[256];
        Pixel_LL[] HistogramsGreen = new Pixel_LL[256];
        Pixel_LL[] HistogramsBlue = new Pixel_LL[256];
        int total;
        String color = input.next();
        System.out.println("Importing the color " + color);
        for (int i = 0; i < 256; i++) { // Reading all level 0 pixels from red
            total = input.nextInt();
            System.out.println("Importing level " + i + " of " + color + " it has: " + total + " pixels");
            HistogramsRed[i] = new Pixel_LL(input, total);
        }
        color = input.next();
        System.out.println("Importing the color " + color);
        for (int i = 0; i < 256; i++) { // Reading all level 0 pixels from green
            total = input.nextInt();
            System.out.println("Importing level " + i + " of " + color + " it has: " + total + " pixels");
            HistogramsGreen[i] = new Pixel_LL(input, total);
        }
        color = input.next();
        System.out.println("Importing the color " + color);
        for (int i = 0; i < 256; i++) { // Reading all level 0 pixels from blue
            total = input.nextInt();
            System.out.println("Importing level " + i + " of " + color + " it has: " + total + " pixels");
            HistogramsBlue[i] = new Pixel_LL(input, total);
        }
        PixelLinkedList_node helpPtr = null;

        for (int i = 0; i < 256; i++) { // 0 - 256
            if (HistogramsRed[i].getHead() != null) {
                helpPtr = HistogramsRed[i].getHead();
                while (helpPtr != null) {
                    replot.getPixel(helpPtr.getX(), helpPtr.getY()).setRed(i);
                    helpPtr = helpPtr.getNext();
                }
            }

            if (HistogramsGreen[i].getHead() != null) {
                helpPtr = HistogramsGreen[i].getHead();
                while (helpPtr != null) {
                    replot.getPixel(helpPtr.getX(), helpPtr.getY()).setGreen(i);
                    helpPtr = helpPtr.getNext();
                }
            }

            if (HistogramsBlue[i].getHead() != null) {
                helpPtr = HistogramsBlue[i].getHead();
                while (helpPtr != null) {
                    replot.getPixel(helpPtr.getX(), helpPtr.getY()).setBlue(i);
                    helpPtr = helpPtr.getNext();
                }
            }
        }
        System.out.println("DONE");
        replot.show();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Pictures.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Pictures.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Pictures.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Pictures.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Pictures().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AA;
    private javax.swing.JPanel AA_Menu;
    private javax.swing.JButton Blending;
    private javax.swing.JSlider BlueSlider;
    private javax.swing.JButton BrowesButton;
    private javax.swing.JButton ClearButton1;
    private javax.swing.JButton Collage;
    private javax.swing.JButton Darkness;
    private javax.swing.JSlider GreenSlider;
    private javax.swing.JPanel Information_Menu;
    private javax.swing.JLabel InputImageLabel;
    private javax.swing.JButton Lightnes;
    private javax.swing.JLabel OutputImageLabel;
    private javax.swing.JLabel Pixel_number;
    private javax.swing.JSlider RedSlider;
    private javax.swing.JButton Rotation_Button1;
    private javax.swing.JPanel center_panel;
    private javax.swing.JPanel collage;
    private javax.swing.JPanel collage_Menu;
    private javax.swing.JPanel colorProcessing_Menu;
    private javax.swing.JPanel color_Processing;
    private javax.swing.JPanel filter_Menu;
    private javax.swing.JPanel filters;
    private javax.swing.JLabel hight;
    private javax.swing.JButton histogram;
    private javax.swing.JButton horizontal;
    private javax.swing.JPanel info;
    private javax.swing.JButton information_button;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel main_jPanel2;
    private javax.swing.JSlider rotateSlider;
    private javax.swing.JSlider sliderBlending;
    private javax.swing.JButton vertical;
    private javax.swing.JLabel width;
    // End of variables declaration//GEN-END:variables
}
